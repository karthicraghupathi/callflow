.TH CALLFLOW 1 "2011/06/05" callflow "callflow - Sequence Diagram Generator"


.SH NAME
callflow - Sequence Diagram Generator

.SH SYNOPSIS
callflow [options] <trace-file>

.SH DESCRIPTION
This is a collection of awk and shell scripts that will take a capture file that can be read by tshark and produce a callflow sequence diagram.  The scripts have been primarily tested with SIP call flows, but should work for other network traffic as well.


.SS Using callflow
With callflow in your path, just type:
  callflow capture-file.cap
.sp 0
(see below for more options)

This will produce a directory named like your capture file in your working directory (eg: if file is capture-file.cap, the directory will be capture-file).
In this, you will find at least:
  - callflow.svg file
  - callflow.png file
  - several html index files
  - graph.html file
  - frames directory with FrameX.html files inside

You may also find (depending on options chosen):
  - callflow.long
  - callflow.short

You can view callflow.svg with the Adobe SVG plugin or Firefox, or you can view index*.html with any web browser.  Both the SVG file and the html file contain links into the frames directory so that you can look at the contents of the full packet frame.  All the frames have been processed to remove the IP headers, which usually aren't that interesting.

.SH OPTIONS
.PP
.I Callflow
accepts the followings options:
.TP
.PD 0
.B -h
Print the short help message.

.TP
.PD 0
.B --help
Print the long help message.

.TP
.PD 0
.B -v
.TP
.PD
.B --version
Print version number.

.TP
.PD 0
.B --archive <archive type>
Create an archive with the files for showing the callflow diagram.  Available archive types are: files, bzip2 and zip.  The archive type \fIfiles\fR just list the files required for the callflow diagram.  It can be used to create an archive with it.

.TP
.PD 0
.B --browser
Launch a browser with the callflow.

.TP
.PD 0
.BI -f " filter"
.TP
.PD
.BI --capture-filter " filter"
A filter can be used to show only those frames that match the given filter criteria.  This filter is for traces that have been captured with programs such as wireshark, snoop, tcpdump, thsark and the like.  Callflow uses tshark's DISPLAY filter functionality to filter the trace.  More information about tshark's DISPLAY filter can be obtained from the tshark man page. A useful filter for SIP traffic is "sip".

.TP
.PD 0
.B -o
.TP
.PD
.B --list-nodes
List the unique nodes in the trace file (don't forget to redirect output in another file. Example of use: callflow --list-nodes capture.cap > order).  See the description of the file \fIorder\fR in the \fIfiles\fR section.

.TP
.PD 0
.B --no-loops
Prevent flows from and to the same equipment to be represented.

.TP
.PD 0
.B --no-sdp
Do not show detailed SDP information in the callflow

.TP
.PD 0
.B --no-time
Do not show the time.

.TP
.PD 0
.B --nodenames <filename>
A file containing the element or node names that belong to the
addresses shown in the callflow.  The file is space separated, the first column
contains the IP address of the node the rest of the line is the node alias.
E.g.:
.sp 0
10.10.20.30 Subscriber A
.sp 0
10.20.100.111 Asterisk
.sp 0
See the description of the file \fInodenames.conf\fR in the \fIfiles\fR section.

.TP
.PD 0
.B -d
.TP
.PD
.B --remove-duplicate-frames
Remove duplicate frames while computing. This option should not be selected on the first run.

.TP
.PD 0
.BI --title " title"
Specify the title of the callflow.  If not specified the file name containing the trace will be used.

.TP
.PD
.B --refresh-cache
Use callflow and callflow.long files from FILE directory.
.sp 0
Note 1: if --refresh-cache and --remove-duplicate-frames are used, only --refresh-cache is executed.
.sp 0
Note 2: this option sould not be selected on the first run.

.TP
.PD 0
.BI --width-between-nodes " width"
Distance between the nodes in final picture.  The distance may vary between 100 and 250.  Default = 200.

.TP
.PD 0
.B --with-sdp
Show detailed SDP information in the callflow (default)


.SS Filtering the diagram
A filter can be used to show only those frames that match the given filter criteria.  This filter is for traces that have been captured with programs such as wireshark, snoop, tcpdump, thsark and the like.  Callflow uses tshark's DISPLAY filter functionality to filter the trace.  More information about tshark's DISPLAY filter can be obtained from the tshark man page. A useful filter for SIP traffic is "sip".


.SS Ordering the diagram
If you know what nodes in your network are logically connected, you can have the diagram ordered in a meaningful way.  Just create a file called order in your current directory or in the setup directory with the order of your network nodes, one per line.  You must use the exact name or IP address that appears in your capture file in the form: <host/ip>:<port>, or use a regular expression that resolves to that name. Using a regular expression can be useful to collapse several nodes in to one logical node.

You can generate an order file with:
  callflow --list-nodes capture-file.cap > order

The format of the order file is as follows:
<node-regex-pattern> [optional-label]

Network nodes that are in your filtered capture file but not in your order file will appear on the right of the diagram, and nodes that are in your order file but not in the filtered capture will not be present in the diagram.


.SS Labeling the diagram
First, you need to create on order file, as above.  Anything that appears after the node name or IP will be used as the label in the diagram.  Otherwise, the node name or IP will be used as the label.


.SS Forcing a node into the diagram
If you would like a node that has no traffic to appear in the diagram, put the string "!f!" as part of its label in the order file. 
The string "!f!" will be edited out of the label.  This can be useful to show the position of a firewall in a trace, or to illustrate a proxy that does not receive traffic.
Make sure that the forced node does not resolve to a regex pattern that another node will match! (ie. don't use ".")

.I Example order file
 10.250.250.101:(1917|5060) Pingtel
 10.250.250.201:5060 VOCAL-UAMS
 10.250.250.201:5070 VOCAL-RS
 10.250.250.201:5065 VOCAL-GWMS
 firewall !f!Firewall
 10.250.250.104:5060 PSTN-GW


.SS Titling the diagram
You can title the diagram by using the --title option. If no --title option is provided, a default title based on the filename will be used.

.SS Removing Duplicate Frames
You can remove duplicate frames from the short text-file with:
callflow --remove-duplicate-frames foo

Duplicates are determined by examining each line in foo, and comparing frames/Frame<#>.html with all previously seen frames.

.SS "Session ID" to Sequence Lines
Callflow colors every frame based on the specific pattern: 'Call-Id:' or 'i:' (for abbreviated SIP messages).


.SH TWEAKING TSHARK PREFERENCE
You can change the level of detail provided in the "Internet Protocol", "User Datagram Protocol", and "Transmission Control Protocol" sections of the detailed frames/Frame*.html pages by tweaking the following entries in your ~/.wireshark/preferences:

ip.ip_summary_in_tree
tcp.tcp_summary_in_tree
udp.udp_summary_in_tree

If any of these items are set to TRUE, then only the summary line will appear in frames/Frame*.html. Otherwise, the gory details will be displayed.


.SH CREATING DIAGRAM MANUALLY
You can manually create a diagram by creating two text files, foo.short and foo.long.

When you run callflow, you can take the output files callflow.short and callflow.long as a starting point.

The first file (.short) contains the trace information, one transaction per line, in the following format:

 <time>|<trace-filename>|<frame #>|<src node>|<src port>|<sessionID>|<dest node>|<dest port>|<protocol>|<summary>|<remark>

.I For example:

 16:07:56.616502||31|172.20.154.66|sip|{1}|172.20.154.92|dsmeter_iatc|SIP/SDP|Request: INVITE sip:68@openims.fr, with session description
 16:07:56.617453||32|172.20.154.92|dsmeter_iatc|{1}|172.20.154.66|sip|SIP|Status: 100 trying -- your call is important to us
 etc.

  / \\
 / ! \\ It is important that there is *no blank lines* in the short text-file.
 -----



If this file is called foo.short, you can create another file called foo.long with longer descriptions of each transaction, in the following format:

 Frame #
 Descriptive information
 goes here

 Frame #
 Description of another frame


.I For example:

 Frame 1
 Via: SIP/2.0/UDP 192.168.1.112:5060
 From: "C7960 (x1201)" <sip:1201@192.168.1.42>;tag=aab70900293102348a-7008
 To: <sip:1020@192.168.1.42>

 Frame 2
 To: <sip:1020@192.168.1.42:5060>;tag=53d20696
 From: "C7960 (x1201)"<sip:1201@192.168.1.42:5060>;tag=aab70900293102348a-7008
 Call-ID: aab70900-2fe3102-3ae-2b27@192.168.1.112

 etc.


To process your text files, type the following:
  callflow -t capture-file.cap


.SH ADDING COMMENTS
You can add a comment to your diagram by adding a line that start with "# " to short text-file. If in the middle of the line there is a " ! " token, then the comment becomes a hyper-link with what precedes the " ! " is the text that is displayed, and what comes after is the link to be followed when a user clicks on the text.

.I For example:

 # Click here for original wireshark capture file ! mycapture.cap
 # This is a comment
 1 Alice 1000 -> Bob 2000 Alice sends Bob an Invite
 2 Bob 2000 -> Alice 1000 Bob sends Alice a 200
 etc.

  / \\
 / ! \\ It is important that there be *no blank lines* in the short text-file.
 -----


.SH Example
.SS Create an order file:
 $ callflow --list-nodes mycapture.cap > order
 (edit order file as needed)

.SS Generate initial diagram:
 $ callflow mycapture.cap

.SS Remove retransmitted SIP packets:
We will now use "mycapture/callflow.short" and "mycapture/callflow.long" text files for further processing:
 $ callflow --remove-duplicate-frames mycapture.cap

.SS Add any desired comments to callflow, then regenerate diagram (repeat as needed):
 $ callflow mycapture.cap


.SH HOW IT WORKS
Well, this is kind of ugly:

    a.  look for the order files
    b.  run tshark twice to get short and long output files
    c.  use long2html.awk to convert long output file into frame*.html files
    d.  get all the unique nodes from the short output file
    e.  order them and make sure all nodes are present
    f.  create the first few lines of the main awk script using makevars.awk
    g.  run the main awk script (callflow.awk) on the short output file:
        I.     create SVG file header and html <map> header
        II.    create labels in SVG file
        III.   for each line, create an arrow in the SVG file and a
               <area> element for the image map
        IV.    write out the SVG and map file footers

    h.  generate callflow.png using inkscape
    i.  generate html index files
    i.  clean up all the /tmp files


.SH "FILES"
.SS callflow.conf
The system-wide configuration file \fI/etc/callflow.conf\fR, and the personal ones \fI$HOME/.callflow.conf\fR
and \fIcallflow.conf\fR are used by callflow.  If the system-wide configuration file exists, it is read first,
overriding the default settings.  If the personal configuration files exists, they are read next, overriding
any previous values.

.SS order
The file order is expected in the current working directory, and determines the order of the nodes in the callflow.

.SS nodenames.conf
The file nodenames.conf is expected in respectively $HOME/.callflow, the current working directory or the file can be defined with the argument --nodenames.  The last nodenames.conf file (or the file specified with --nodenames) found will be used.

.SH TO DO
It would be much nicer to take the tshark filtered output and build an intermediate XML representation of it.  Then use XSLT to transform it into the SVG file.  This way you could write up illustrative sequence diagrams more easily and make use of more tools that can manipulate XML.

Write port numbers at the ends of each arrow in an unobtrusive fashion.

Automatically find a "best order" for the nodes, possibly based on total arrow length minimization.

Specify output filenames and locations on the command line.


.SH "SEE ALSO"
Callflow project page at \fIhttp://callflow.sourceforge.net\fR


.SH AUTHORS
Man page created by Arnaud Morin <arnaud.morin@gmail.com>.

See AUTHORS file provided with this package to see all project contributors.

