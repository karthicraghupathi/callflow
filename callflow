#!/bin/bash
###
###  CallFlow diagram generator
###
###  Usage:  callflow.sh capture-file | -t text-input file
###
###  Output: $DESTDIR/callflow.svg, $DESTDIR/callflow.png, $DESTDIR/index.html, $DESTDIR/frames/frame*.html
###
###  Files:  order, filter, session, $CONFDIR/order, $CONFDIR/filter, $CONFDIR/session
###

##################################
# Variables
##################################
CONFDIR="/etc/callflow";
keepSL=0 # do not keep cap.short and cap.long files
removeDF=0; # do not remove Duplicate Frames
sessionID=0; # do not use session ID
order=0; # do not build order file
noLocalLoop=0; # do not take into account flows from and to the same element (rounded flows)

##################################
# Check configuration files :
#   callflow.cfg, session, filter, order, title, colors
##################################
if [ -f $CONFDIR/callflow.cfg ]; then
    . $CONFDIR/callflow.cfg;
else
    # Basic conf
    SETUPDIR="/usr/local/callflow"; 
    TMPDIR="/tmp";
fi

if [ -f session ]; then
    sessionFile=session;
elif [ -f $CONFDIR/session ]; then
    sessionFile=$CONFDIR/session;
else
    sessionFile=none;
fi

if [ -f filter ]; then
    filterFile=filter;
elif [ -f $CONFDIR/filter ]; then
    filterFile=$CONFDIR/filter;
else
    filterFile=none;
fi

if [ -f order ]; then
    orderFile=order;
elif [ -f $CONFDIR/order ]; then
    orderFile=$CONFDIR/order;
else
    orderFile=none;
fi

if [ -f title ]; then
    titleFile=title;
elif [ -f $CONFDIR/title ]; then
    titleFile=$CONFDIR/title;
else
    titleFile=none;
fi

if [ -f colors ]; then
    colorFile=colors
elif [ -f $CONFDIR/colors ]; then
    colorFile=$CONFDIR/colors
else
    colorFile=colors
    for Color in black orange sienna red green purple chocolate olivedrab darkred \
        darkslategrey midnightblue maroon; do
        echo $Color
    done > $colorFile
fi

##################################
# Check command line options
##################################
for arg in $*
do
	case $arg in
    -h)
		#Help needed
		echo "Options availables"
		echo "------------------"
		echo "Usage: callflow [OPTION] FILE.cap"
		echo "  -h, print this help message"
		echo "  -o, create an order file with the nodes in FILE.cap"
		echo "      (Don't forget to redirect output in another file. "
		echo "      Exemple of use: callflow -o capture.cap > order)"
		echo "  -t, use cap.short and cap.long files."
		echo "      note 1 - if -t and -d are used, only -t is executed."
		echo "      note 2 - this option sould not be selected on the first run."
		echo "  -d, remove duplicate frames while computing."
		echo "      This option should not be selected on the first run."
		echo "  -s, add a session ID to Sequence Lines in FILE/callflow.long"
		echo "      This option needs a session file in current folder or"
		echo "      in the SETUP folder (example of session file contents: 'Call-Id:')."
		echo "  -nl, prevent flows from and to the same equipment to be represented."

		exit 0;
		;;
    -d)
		#inputfile
		#we want to remove duplicate frames
		removeDF=1
		echo "Duplicate Frames will be removed"
		;;
    -t)
                #keep short and long files
                keepSL=1
                echo "Short and Long files will be used"
                ;;
    -s)
		if [ $sessionFile = none ]; then
		  echo "You must create either $CONFDIR/session or ./session to use -s option";
		  exit 1;
		fi
		#we want to add "Session ID"
		sessionID=1
		echo "Session ID will be shown"
		
		;;
    -o)
		#inputfile is a cap-file
		#we want to make an order file
		order=1
		;;
    -r)
		#inputfile is a cap-file
		#we want to remove callflow.short and callflow.long after proceeding
		#inputfile=$2;
		removeSL=-r;

		;;
		-nl)
		#We want to disable auto flows (From and To the same equipment)
		noLocalLoop=1;
		echo "Flows from and to the same equipment will not be shown"
		;;
     *)
		#inputfile is a cap-file
		#no options
		inputfile=$arg;

	;;
  esac
done

##################################
# Check input file
##################################
if [ ! -f $inputfile ]; then 
	echo "Input file does not exists !"
	exit 1;
fi

##################################
# Build short and long files
##################################
# DESTDIR
DESTDIR=`ls $inputfile | sed -r "s/(.+)\.(.+)/\1/"`;
mkdir -p $DESTDIR
# Copy cap file into destdir
TRACEFILE=$(basename $inputfile)
cp $inputfile $DESTDIR/$TRACEFILE

# if we do want to build new short and long file
if [ $keepSL = 0 ]; then
	# filterFile
	if [ $filterFile != none ]; then
		echo Using the following wireshark display filter:
		cat $filterFile
		tshark -r $inputfile -R "`cat $filterFile`" -o 'column.format:"No.","%m","Src","%s","Port","%S","Ignored","%m","Dest","%d","Port","%D","Protocol","%p","Info","%i"' > $DESTDIR/callflow.short
		tshark -r $inputfile -R "`cat $filterFile`" -V > $DESTDIR/callflow.long
	else
		echo 'Warning: filter file not found -- no filters applied'
		tshark -r $inputfile -o 'column.format: "No.", "%m", "Src", "%s", "Port", "%S", "Ignored", "%m", "Dest", "%d", "Port", "%D", "Protocol", "%p", "Info", "%i"' > $DESTDIR/callflow.short
		tshark -r $inputfile -V > $DESTDIR/callflow.long
	fi
else
	# We want to keep SL files
	# disable duplicate frame remove
	removeDF=0
fi

# We have to check if short and long file exist
if [ ! -f $DESTDIR/callflow.long ]; then
	echo "File callflow.long does not exist !"
	exit 1;
else
	# Some SIP messages don't include a space between the Call-ID tag and
	# Call-ID value
	sed -i 's,\(Call-ID:\)\([^ ]\),\1 \2,' $DESTDIR/callflow.long
fi
if [ ! -f $DESTDIR/callflow.short ]; then
        echo "File callflow.short does not exist !"
	exit 1;
else
	# Remove Malformed packages from callflow.short, especially because it
	# contains unpaired "["
	sed -i '/Malform/d' $DESTDIR/callflow.short
fi

##################################
# order file
##################################
# Build the order file and exit
if [ $order = 1 ]; then
	if [ $filterFile != none ]; then
		echo 'Using the following wireshark display filter:' 1>&2
		cat $filterFile 1>&2
		tshark -r $inputfile -R "`cat $filterFile`" -o 'column.format: "Src", "%s", "Port", "%S", "Dest", "%d", "Port", "%D"' | awk '{ printf("%s:%s\n%s:%s\n", $1, $2, $3, $4); }' | sort | uniq
	else
		echo 'Warning:  filter file not found -- no filters applied' 1>&2
		tshark -r $inputfile -o 'column.format: "Src", "%s", "Port", "%S", "Dest", "%d", "Port", "%D"' | awk '{ printf("%s:%s\n%s:%s\n", $1, $2, $3, $4); }' | sort | uniq
	fi
	exit 0;
fi

##################################
# Remove duplicate Frame
##################################

if [ $removeDF = 1 ]; then
  if [ -d $DESTDIR/frames ]; then
    echo "Removing Duplicates Frames"
  else
    echo "Please run the script without -d once in order to build $DESTDIR directory"
    exit 1;
  fi
  #awk -f $SETUPDIR/awk-scripts/removedups.awk -v destDir=$DESTDIR < $DESTDIR/callflow.short > $DESTDIR/callflow.short.new
  $SETUPDIR/awk-scripts/removedups.sh $DESTDIR $DESTDIR/frames $TMPDIR
  rm $DESTDIR/callflow.short
  mv $DESTDIR/callflow.short.new $DESTDIR/callflow.short
fi

##################################
# Add session ID
##################################
if [ $sessionID = 1 ]; then
	awk -f $SETUPDIR/awk-scripts/marksession.awk -v session_token="`cat $sessionFile`" -v destDir=$DESTDIR < $DESTDIR/callflow.short > $DESTDIR/callflow.short.new
	rm $DESTDIR/callflow.short
	mv $DESTDIR/callflow.short.new $DESTDIR/callflow.short
fi

##################################
# common
##################################
# Create Frames
mkdir -p $DESTDIR/frames
awk -f $SETUPDIR/awk-scripts/long2html.awk -v destDir=$DESTDIR < $DESTDIR/callflow.long

# Compute nodes
awk '{ if($1 != "#") { printf("%s:%s\n%s:%s\n", $2, $3, $5, $6) }}' $DESTDIR/callflow.short | 
    sort -u > $TMPDIR/callflow.auto-uniq.$PPID

# orderFile
if [ $orderFile != none ]; then
    # add forced nodes
    cp $TMPDIR/callflow.auto-uniq.$PPID $TMPDIR/callflow.auto-uniq-forced.$PPID
    grep "!f!" $orderFile | cut -d " " -f 1 >> $TMPDIR/callflow.auto-uniq-forced.$PPID
    cut -d " " -f 1 < $orderFile > $TMPDIR/callflow.order-nodes.$PPID
    
    # prune nodes not appearing in capture file and not forced.
    grep -w -v -f $TMPDIR/callflow.auto-uniq-forced.$PPID $TMPDIR/callflow.order-nodes.$PPID > $TMPDIR/callflow.prune-candidate.$PPID
    awk -f $SETUPDIR/awk-scripts/makevars.awk < $TMPDIR/callflow.prune-candidate.$PPID > $TMPDIR/callflow.prune-vars.$PPID
    cat $TMPDIR/callflow.prune-vars.$PPID $SETUPDIR/awk-scripts/prunenodes.awk > $TMPDIR/callflow.prune-awk.$PPID
    awk -f $TMPDIR/callflow.prune-awk.$PPID < $DESTDIR/callflow.short > $TMPDIR/callflow.auto-not-pruned.$PPID
    grep -w -v -f $TMPDIR/callflow.auto-not-pruned.$PPID $TMPDIR/callflow.prune-candidate.$PPID > $TMPDIR/callflow.auto-prune.$PPID
    grep -w -v -f $TMPDIR/callflow.auto-prune.$PPID $TMPDIR/callflow.order-nodes.$PPID > $TMPDIR/callflow.order-nodes-pruned.$PPID
    
    # add nodes appearing in capture file but not in order file
    cp $TMPDIR/callflow.order-nodes-pruned.$PPID $TMPDIR/callflow.order-nodes-final.$PPID
    grep -w -f $TMPDIR/callflow.auto-uniq-forced.$PPID $TMPDIR/callflow.order-nodes.$PPID >> $TMPDIR/callflow.order-nodes-final.$PPID
    grep -w -f $TMPDIR/callflow.order-nodes-final.$PPID $orderFile > $TMPDIR/callflow.order.$PPID
    grep -w -v -E -f $TMPDIR/callflow.order-nodes.$PPID $TMPDIR/callflow.auto-uniq-forced.$PPID >> $TMPDIR/callflow.order.$PPID
    sed "s/!f!//g" < $TMPDIR/callflow.order.$PPID > $TMPDIR/callflow.order-final.$PPID
    
    finalOrderFile=$TMPDIR/callflow.order-final.$PPID
    
    echo Using the following order:
    cat $finalOrderFile
else
    echo 'Warning: order file not found -- using alphabetical'
    finalOrderFile=$TMPDIR/callflow.auto-uniq.$PPID
fi

# titleFile
if [ $titleFile != none ]; then
	title=`cat $titleFile`;
else
	title=`basename $inputfile`;
fi

( awk -f $SETUPDIR/awk-scripts/makevars.awk $finalOrderFile

  echo
  # Add graph title
  echo "  title=\"$title\";"

  # Add graph variables
  echo "  yLineSpace = 24;"
  echo "  xHostSpace = 200;"
  echo "  leftMargin = 100;"
  echo "  rightMargin = 100;"
  echo "  topMargin = 50;"
  echo "  bottomMargin = 50;"
  echo "  numTraces = numHosts;"

  # Add noLocalLoop to vars in order to delete self messaging
  echo "  noLocalLoop=\"$noLocalLoop\";"
  echo "  numLines = $(cat $DESTDIR/callflow.short | wc -l);"
  echo

  # Add colors from colorFile
  awk '{printf("  color[%s] = \"%s\"\n", NR-1, $1)}' $colorFile
  echo
  cat $SETUPDIR/awk-scripts/callflow.awk

) > $TMPDIR/callflow.awk.$PPID

# Build callflow.svg
awk -f $TMPDIR/callflow.awk.$PPID $DESTDIR/callflow.short > $DESTDIR/callflow.svg

# Remove temporary files
\rm $TMPDIR/callflow.*.$PPID

# Check to see if java and the batik rasterizer are installed
which java 2>&1 > /dev/null
if [ $? == 1 ]; then
    echo 'Warning: java not found -- not running rasterizer'
else
    # Build callflow.png
    inkscape --export-dpi=90 -C --export-background=white --export-png=$DESTDIR/callflow.png $DESTDIR/callflow.svg

    ( echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\""
      echo "  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"
      echo "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">"
      echo " <head>"
      echo "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>"
      echo "  <title>Callflow: $inputfile</title>"
      echo "  <style type=\"text/css\">"
      echo ".callflow-image img {"
      echo " display: block;"
      echo " border: 0px;"
      echo " margin-left: auto;"
      echo " margin-right: auto;"
      echo "}"
      echo "  </style>"
      echo " </head>"
      echo " <body>"
      echo "  <div class=\"callflow-image\">"
      cat imagemap
      echo "   <p>"
      echo "    <img src=\"callflow.png\" usemap=\"#callflowmap\" alt=\"Call flow sequence diagram for $inputfile\"/>"
      echo "   </p>"
      echo "   <p>"
      echo "    <a href=\"$TRACEFILE\">Trace source</a>"
      echo "   </p>"
      echo "  </div>"
      echo " </body>"
      echo "</html>"

    ) > $DESTDIR/index.html
    
    ( echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\""
      echo "  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"
      echo "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">"
      echo " <head>"
      echo "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>"
      echo "  <title>Callflow: $inputfile</title>"
      echo "  <style type=\"text/css\">"
      echo ".callflow-image img {"
      echo " display: block;"
      echo " border: 0px;"
      echo " margin-left: auto;"
      echo " margin-right: auto;"
      echo "}"
      echo "  </style>"
      echo "  <script type=\"text/javascript\" src=\"js/overlib.js\"></script>"
      echo "  <script type=\"text/javascript\" src=\"js/callflow.js\"></script>"
      echo " </head>"
      echo " <body>"
      echo "  <div class=\"callflow-image\">"
      cat imagemap
      echo "   <p>"
      echo "    <img src=\"callflow.png\" usemap=\"#callflowmap\" alt=\"Call flow sequence diagram for $inputfile\"/>"
      echo "   </p>"
      echo "   <p>"
      echo "    <a href=\"$TRACEFILE\">Trace source</a>"
      echo "   </p>"
      echo "  </div>"
      echo " </body>"
      echo "</html>"

    ) > $DESTDIR/index_dynamic.html
    
    #Copy JavaScript files into DESTDIR
    cp -af $SETUPDIR/js $DESTDIR/

    sed 's/coords=/target=\"msg\" coords=/' $DESTDIR/index.html > $DESTDIR/graph.html

    ( echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\""
      echo "   \"http://www.w3.org/TR/html4/frameset.dtd\">"
      echo "<html>"
      echo " <head>"
      echo "  <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" >"
      echo "  <title>Callflow: $title</title>"
      echo " </head>"
      echo " <frameset cols=\"75%,25%\">"
      echo "  <frame name=\"graph\" src=\"graph.html\">"
      echo "  <frame name=\"msg\" src=\"frames/Frame1.html\">"
      echo " </frameset>"
      echo "</html>"

    ) > $DESTDIR/index_with_frames.html

fi

\rm imagemap
exit 0;

