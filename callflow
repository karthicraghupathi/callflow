#!/bin/bash

###  CallFlow diagram generator
###
###  Usage:  callflow.sh capture-file | -t text-input file
###
###  Output: $DESTDIR/callflow.svg, $DESTDIR/callflow.png, $DESTDIR/index.html, $DESTDIR/frames/frame*.html
###
###  Files:  order, filter, session, $SETUPDIR/order, $SETUPDIR/filter, $SETUPDIR/session
###

##################################
# Variables
##################################
SETUPDIR="/usr/share/callflow";
DESTDIR="./out"; #default
TMPDIR="/tmp";
keepSL=0 # do not keep cap.short and cap.long files
removeDF=0; # do not remove Duplicate Frames
sessionID=0; # do not use session ID
order=0; # do not build order file

##################################
# Check configuration files :
#   session, filter, order, title
##################################
if [ -f session ]; then
    sessionFile=session;
elif [ -f $SETUPDIR/session ]; then
    sessionFile=$SETUPDIR/session;
else
    sessionFile=none;
fi

if [ -f filter ]; then
    filterFile=filter;
elif [ -f $SETUPDIR/filter ]; then
    filterFile=$SETUPDIR/filter;
else
    filterFile=none;
fi

if [ -f order ]; then
    orderFile=order;
elif [ -f $SETUPDIR/order ]; then
    orderFile=$SETUPDIR/order;
else
    orderFile=none;
fi

if [ -f title ]; then
    titleFile=title;
elif [ -f $SETUPDIR/title ]; then
    titleFile=$SETUPDIR/title;
else
    titleFile=none;
fi

##################################
# Check command line options
##################################
for arg in $*
do
	case $arg in
    -h)
		#Help needed
		echo "Options availables"
		echo "------------------"
		echo "Usage: callflow [OPTION] FILE.cap"
		echo "  -h, print this help message"
		echo "  -o, create an order file with the nodes in FILE.cap"
		echo "      (Don't forget to redirect output in another file. "
		echo "      Exemple of use: callflow -o capture.cap > order)"
		echo "  -t, use cap.short and cap.long files."
		echo "      note 1 - if -t and -d are used, only -t is executed."
		echo "      note 2 - this option sould not be selected on the first run."
		echo "  -d, remove duplicate frames while computing."
		echo "      This option should not be selected on the first run."
		echo "  -s, add a session ID to Sequence Lines in FILE/callflow.long"

		exit 0;
		;;
    -d)
		#inputfile
		#we want to remove duplicate frames
		removeDF=1
		echo "Duplicate Frames will be removed"
		;;
    -t)
                #keep short and long files
                keepSL=1
                echo "Short and Long files will be used"
                ;;
    -s)
		if [ $sessionFile = none ]; then
		  echo "You must create either $SETUPDIR/session or ./session to use -s option";
		  exit 1;
		fi
		#we want to add "Session ID"
		sessionID=1
		echo "Session ID will be shown"
		
		;;
    -o)
		#inputfile is a cap-file
		#we want to make an order file
		order=1
		;;
    -r)
		#inputfile is a cap-file
		#we want to remove callflow.short and callflow.long after proceeding
		inputfile=$2;
		removeSL=-r;

		;;
     *)
		#inputfile is a cap-file
		#no options
		inputfile=$arg;

	;;
  esac
done

##################################
# Check input file
##################################
if [ ! -f $inputfile ]; then 
	echo "Input file does not exists !"
	exit 1;
fi

##################################
# Build short and long files
##################################
# DESTDIR
DESTDIR=`ls $inputfile | sed -r "s/(.+)\.(.+)/\1/"`;
mkdir -p $DESTDIR
# Copy cap file into destdir
cp $inputfile $DESTDIR/callflow-source.cap

# if we do want to build new short and long file
if [ $keepSL = 0 ]; then
	# filterFile
	if [ $filterFile != none ]; then
		echo Using the following wireshark display filter:
		cat $filterFile
		tshark -r $inputfile -R "`cat $filterFile`" -o 'column.format:"No.","%m","Src","%s","Port","%S","Ignored","%m","Dest","%d","Port","%D","Protocol","%p","Info","%i"' > $DESTDIR/callflow.short
		tshark -r $inputfile -R "`cat $filterFile`" -V > $DESTDIR/callflow.long
	else
		echo 'Warning: filter file not found -- no filters applied'
		tshark -r $inputfile -o 'column.format: "No.", "%m", "Src", "%s", "Port", "%S", "Ignored", "%m", "Dest", "%d", "Port", "%D", "Protocol", "%p", "Info", "%i"' > $DESTDIR/callflow.short
		tshark -r $inputfile -V > $DESTDIR/callflow.long
	fi
else
	# We want to keep SL files
	# disable duplicate frame remove
	removeDF=0
fi

# We have to check if short and long file exist
if [ ! -f $DESTDIR/callflow.long ]; then
	echo "File callflow.long does not exist !"
	exit 1;
fi
if [ ! -f $DESTDIR/callflow.short ]; then
        echo "File callflow.short does not exist !"
	exit 1;
fi

##################################
# order file
##################################
# Build the order file and exit
if [ $order = 1 ]; then
	if [ $filterFile != none ]; then
		echo 'Using the following wireshark display filter:' 1>&2
		cat $filterFile 1>&2
		tshark -r $inputfile -R "`cat $filterFile`" -o 'column.format: "Src", "%s", "Port", "%S", "Dest", "%d", "Port", "%D"' | awk '{ printf("%s:%s\n%s:%s\n", $1, $2, $3, $4); }' | sort | uniq
	else
		echo 'Warning:  filter file not found -- no filters applied' 1>&2
		tshark -r $inputfile -o 'column.format: "Src", "%s", "Port", "%S", "Dest", "%d", "Port", "%D"' | awk '{ printf("%s:%s\n%s:%s\n", $1, $2, $3, $4); }' | sort | uniq
	fi
	exit 0;
fi

##################################
# Remove duplicate Frame
##################################

if [ $removeDF = 1 ]; then
	DESTDIR=`ls $inputfile | sed -r "s/(.+)\.(.+)/\1/"`;
	if [ -d $DESTDIR/frames ]; then
		echo "Removing Duplicates Frames"
        else
                echo "Please run the script without -d once in order to build $DESTDIR directory"
                exit 1;
        fi
	awk -f $SETUPDIR/awk-scripts/removedups.awk -v destDir=$DESTDIR < $DESTDIR/callflow.short > $DESTDIR/callflow.short.new
	rm $DESTDIR/callflow.short
	mv $DESTDIR/callflow.short.new $DESTDIR/callflow.short
fi

##################################
# Add session ID
##################################
if [ $sessionID = 1 ]; then
	awk -f $SETUPDIR/awk-scripts/marksession.awk -v session_token="`cat $sessionFile`" -v destDir=$DESTDIR < $DESTDIR/callflow.short > $DESTDIR/callflow.short.new
	rm $DESTDIR/callflow.short
	mv $DESTDIR/callflow.short.new $DESTDIR/callflow.short
fi

##################################
# common
##################################
# Create Frames
mkdir -p $DESTDIR/frames
awk -f $SETUPDIR/awk-scripts/long2html.awk -v destDir=$DESTDIR < $DESTDIR/callflow.long

# Compute nodes
awk -f $SETUPDIR/awk-scripts/getnodes.awk < $DESTDIR/callflow.short > $TMPDIR/callflow.auto-nodelist.$PPID
sort $TMPDIR/callflow.auto-nodelist.$PPID > $TMPDIR/callflow.auto-sortednodes.$PPID
uniq $TMPDIR/callflow.auto-sortednodes.$PPID > $TMPDIR/callflow.auto-uniq.$PPID

# orderFile
if [ $orderFile != none ]; then
    # add forced nodes
    cp $TMPDIR/callflow.auto-uniq.$PPID $TMPDIR/callflow.auto-uniq-forced.$PPID
    grep "!f!" $orderFile | cut -d " " -f 1 >> $TMPDIR/callflow.auto-uniq-forced.$PPID
    cut -d " " -f 1 < $orderFile > $TMPDIR/callflow.order-nodes.$PPID
    
    # prune nodes not appearing in capture file and not forced.
    grep -w -v -f $TMPDIR/callflow.auto-uniq-forced.$PPID $TMPDIR/callflow.order-nodes.$PPID > $TMPDIR/callflow.prune-candidate.$PPID
    awk -f $SETUPDIR/awk-scripts/makevars.awk < $TMPDIR/callflow.prune-candidate.$PPID > $TMPDIR/callflow.prune-vars.$PPID
    cat $TMPDIR/callflow.prune-vars.$PPID $SETUPDIR/awk-scripts/prunenodes.awk > $TMPDIR/callflow.prune-awk.$PPID
    awk -f $TMPDIR/callflow.prune-awk.$PPID < $DESTDIR/callflow.short > $TMPDIR/callflow.auto-not-pruned.$PPID
    grep -w -v -f $TMPDIR/callflow.auto-not-pruned.$PPID $TMPDIR/callflow.prune-candidate.$PPID > $TMPDIR/callflow.auto-prune.$PPID
    grep -w -v -f $TMPDIR/callflow.auto-prune.$PPID $TMPDIR/callflow.order-nodes.$PPID > $TMPDIR/callflow.order-nodes-pruned.$PPID
    
    # add nodes appearing in capture file but not in order file
    cp $TMPDIR/callflow.order-nodes-pruned.$PPID $TMPDIR/callflow.order-nodes-final.$PPID
    grep -w -f $TMPDIR/callflow.auto-uniq-forced.$PPID $TMPDIR/callflow.order-nodes.$PPID >> $TMPDIR/callflow.order-nodes-final.$PPID
    grep -w -f $TMPDIR/callflow.order-nodes-final.$PPID $orderFile > $TMPDIR/callflow.order.$PPID
    grep -w -v -E -f $TMPDIR/callflow.order-nodes.$PPID $TMPDIR/callflow.auto-uniq-forced.$PPID >> $TMPDIR/callflow.order.$PPID
    sed "s/!f!//g" < $TMPDIR/callflow.order.$PPID > $TMPDIR/callflow.order-final.$PPID
    
    echo Using the following order:
    
    cat $TMPDIR/callflow.order-final.$PPID
    awk -f $SETUPDIR/awk-scripts/makevars.awk < $TMPDIR/callflow.order-final.$PPID > $TMPDIR/callflow.vars.$PPID
else
    echo 'Warning: order file not found -- using alphabetical'
    awk -f $SETUPDIR/awk-scripts/makevars.awk < $TMPDIR/callflow.auto-uniq.$PPID > $TMPDIR/callflow.vars.$PPID
fi

# titleFile
if [ $titleFile != none ]; then
	title=`cat $titleFile`;
else
	title=`basename $inputfile`;
fi

# Add title to vars
echo "title=\"$title\"" >> $TMPDIR/callflow.vars.$PPID
cat $TMPDIR/callflow.vars.$PPID $SETUPDIR/awk-scripts/callflow.awk > $TMPDIR/callflow.awk.$PPID

# Add noAuto to vars in order to delete self messaging
echo "noAuto=\"$noAuto\"" >> $TMPDIR/callflow.vars.$PPID
cat $TMPDIR/callflow.vars.$PPID $SETUPDIR/awk-scripts/callflow.awk > $TMPDIR/callflow.awk.$PPID

# Build callflow.svg
awk -f $TMPDIR/callflow.awk.$PPID \
	-v numLines=`awk -f $SETUPDIR/awk-scripts/wc.awk < $DESTDIR/callflow.short`\
	          < $DESTDIR/callflow.short \
	          > $DESTDIR/callflow.svg

# Remove temporary files
\rm $TMPDIR/callflow.*.$PPID

# Check to see if java and the batik rasterizer are installed
which java 2>&1 > /dev/null
if [ $? == 1 ]; then
    echo 'Warning: java not found -- not running rasterizer'
else
    # Build callflow.png
    java -jar $SETUPDIR/batik/batik-rasterizer.jar $DESTDIR/callflow.svg

    echo "<html>" > $DESTDIR/index.html
    cat imagemap >> $DESTDIR/index.html
    echo "<p align='center'>" >> $DESTDIR/index.html
    echo "<img border='0' src='callflow.png' usemap='#callflowmap'></img>" >> $DESTDIR/index.html
    echo "</p>" >> $DESTDIR/index.html
    echo "<a href='callflow-source.cap'>callflow-source.cap</a>" >> $DESTDIR/index.html
    echo "</html>" >> $DESTDIR/index.html
fi

\rm imagemap
exit 0;

