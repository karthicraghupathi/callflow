#!/bin/bash
###
###  CallFlow diagram generator
###
###  Usage:  callflow.sh capture-file | -t text-input file
###
###  Output: $DESTDIR/callflow.svg, $DESTDIR/callflow.png, $DESTDIR/index.html, $DESTDIR/frames/frame*.html
###
###

##################################
# Variables
##################################
CONFDIR="/etc/callflow";
keepSL=0 # do not keep cap.short and cap.long files
removeDF=0 # do not remove duplicate frames
ORDER=0 # do not build order file
localLoop=1 # take into account flows from and to the same element (rounded flows)
WITH_SESSION=yes
readonly VersionSVN="$Id$"; #DO NOT EDIT THIS LINE BY HAND, DATE IS AUTOMATICALLY ADDED BY SUBVERSION
readonly PRGVRSN=$(awk '{split($4, A, "-"); print A[1] A[2] A[3] "." $3}' <<< "$VersionSVN")
readonly PRGNAME=$(basename $0)

# Define exit values
readonly ERR_ARGUMENT=2

##################################
# Check configuration files :
#   callflow.conf, order, colors
##################################
for CONF in $CONFDIR/callflow.conf $HOME/.callflow/callflow.conf callflow.conf; do
  [[ -f $CONF ]] && . $CONF
done

# Basic conf
[[ -z "$SETUPDIR" ]] && SETUPDIR="/usr/local/callflow"
[[ -z "$TMPDIR" ]] && TMPDIR="/tmp"

[[ ! -d $SETUPDIR ]] && {
  ( echo "$PRGNAME: error: setup directory \"$SETUPDIR\" does not exist"
    echo "Adjust your configuration"
  ) >&2
  exit 1
}

[[ ! -d $TMPDIR ]] && {
  ( echo "$PRGNAME: error: temporary directory \"$TMPDIR\" does not exist"
    echo "Adjust your configuration"
  ) >&2
  exit 1
}

if [[ -z "$FILTER" ]]; then
  FARG=""
  FVAL=""
else
  FARG="-R"
  FVAL="$FILTER"
fi

if [[ -f order ]]; then
  orderFile=order
else
  orderFile=none
fi

if [[ -f colors ]]; then
  COLORS=$(cat colors)
fi

[[ -z "$COLORS" ]] && {
  # At least one color is needed, to prevent errors
  COLORS="black"
}

function make_long_and_short_caches() {

  tshark -r $inputfile $FARG "$FVAL" -V > $DESTDIR/callflow.long

  tshark -r $inputfile $FARG "$FVAL" -t a \
    -o 'column.format: "No.", "%m", "Time", "%t", "Src", "%s", "Port", "%S", "Ignored", "%m", "Dest", "%d", "Port", "%D", "Protocol", "%p", "Info", "%i"' |
    sed 's/^[[:blank:]]*//;s/\([0-9]\{3\}\)000 /\1 /' | awk '{
      # The match and the substr are working together to get the string starting
      # at field 9 till the end of the line.  This provides the frame summary line.
      # But the frame summary may contain characters that influence the match,
      # such as the "(" and ")" characters.  Therefor look for the end of the
      # protocol field (8) as the protocol field contains most likely regular
      # ascii characters.

      # The A[0, "start"] gives the start position of the $8
      match($0, $8, A)
      SUMMARY_START = A[0, "start"] + length($8) + 1
      SUMMARY = substr($0, SUMMARY_START)
      printf("%s|%s|%s|%s||%s|%s|%s|%s\n", $1, $2, $3, $4, $6, $7, $8, SUMMARY)

  }' > $TMPDIR/${PRGNAME}-tshark-1.$$

  tshark -r $inputfile $FARG "$FVAL" -t a \
    -o 'column.format: "No.", "%m", "Cseq", "%Cus:sip.CSeq"' |
    sed 's/^[[:blank:]]*//;s/ /|/' > $TMPDIR/${PRGNAME}-tshark-2.$$

  ( # echo "time|no|trace|src|srcport|dir|dst|dstport|prot|summary|remark"
    join -t "|" --nocheck-order $TMPDIR/${PRGNAME}-tshark-1.$$ $TMPDIR/${PRGNAME}-tshark-2.$$ | awk -F "|" '{
      printf("%s||%s|", $2, $1)
      for ( N = 3; N < NF; N++) {
        printf("%s|", $N)
      }
      printf("%s\n", $N)
    }'
  ) > $DESTDIR/callflow.short

  rm $TMPDIR/${PRGNAME}-tshark-1.$$ $TMPDIR/${PRGNAME}-tshark-2.$$

  TRACE_FILE=$(basename $inputfile)
  MD5SUM=$(md5sum $inputfile | awk '{print $1}')
  echo "$TRACE_FILE|$MD5SUM" > $DESTDIR/metadb
}

function usage() {

  ( echo "$SHORTHELP"
    echo "See $PRGNAME --help for extended help."
  ) >&2
  exit 0
}

function help () {

  cat << EOF >&1
Usage: $PRGNAME [options] <trace file>

Options:
   -h           Print short help and exit
  --help        Print this help and exit
  --version, -v Print version

  --capture-filter <filter>, -f <filter>
                A filter can be used to show only those frames that match the
                given filter criteria.  This filter is for traces that have been
                captured with programs such as wireshark, snoop, tcpdump, tshark
                and the like.  $PRGNAME uses tshark's DISPLAY filter functionality
                to filter the trace.  More information about tshark's DISPLAY
                filter can be obtained from the tshark man page.
                A useful filter for SIP traffic is "sip".

  --no-loops
                Prevent flows from and to the same equipment to be represented.

  --no-session-token
                Disable the session detection (show ID and colorization), for more
                information see the --session-token argument.

  --no-time
                Do not show the time.

  --list-nodes, -o
                List the unique nodes in the trace file
                (Don't forget to redirect output in another file.
                 Example of use: $PRGNAME --list-nodes capture.cap > order)

  --remove-duplicate-frames, -d
                Remove duplicate frames while computing.
                This option should not be selected on the first run.

  --session-token <session>
                Add a session ID to sequence lines and color lines related
                to this session ID.
                This option is available by default and the value is 
                'Call-Id:' (depending on your callflow configuration). 
                You should use this option in order to overwrite the default
                value.
                If you want to disable the session detection (show ID and 
                colorization), you should use: --no-session-token.

  --title <title>
                Use <title> as title in the callflow.  If not specified the
                name of file containing the trace will be used instead. Surround
                <title> by quotes in case the title contains spaces or tabs.

  --use-cache, -c, -t
                Use cap.short and cap.long files.
                Note 1: if -c and -d are used, only -c is executed.
                Note 2: this option sould not be selected on the first run.

  --width-between-nodes <width>
                Distance between adjacent nodes in final picture.  The width may
                vary between 100 and 250.  Default = 200.

EOF
}

readonly SHORTHELP="Usage: $PRGNAME [options] <filename>" 

# Command line argument parsing, the allowed arguments are
# alphabetically listed, keep it this way please.
LOPT="capture-filter:,help,list-nodes,no-loops,no-session-token,no-time,remove-duplicate-frames"
LOPT="$LOPT,session-token:,title:,width-between-nodes:,use-cache,version"

# Note that we use `"$@"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options=cdfhortv --long $LOPT -n $PRGNAME -- "$@")

if [[ $? -ne 0 ]]; then
  echo "Terminating..." >&2
  exit $ERR_ARGUMENT
fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true; do
  case $1 in
  --help)                help; exit ;;
   -h)                   usage; exit;;

  --capture-filter|-f)
                         # Overwrite the default filter previously red from the configuration file
                         OPT_FILTER=$2; shift
                         #echo " * Will use the following filter: $OPT_FILTER"
                         ;;
  --list-nodes|-o)
                         ORDER=1
                         ;;
  --no-loops)
                         # We want to disable auto flows (From and To the same equipment)
                         noLocalLoop=1;
                         #echo " * Flows from and to the same equipment will not be shown"
                         ;;
  --no-session-token)
                         WITH_SESSION=no
                         ;;
  --no-time)
                         OPT_SHOW_TIME=no
                         #echo " * Time will not be shown"
                         ;;
  --remove-duplicate-frames|-d)
                         # Remove duplicate frames
                         removeDF=1
                         #echo " * Duplicate frames will be removed"
                         ;;
  --session-token)
                         SESSION="$2"; shift
                         if [[ -n "$SESSION" ]]; then
                           WITH_SESSION=yes
                         else
                           WITH_SESSION=no
                         fi
                         ;;
  --title)
                         OPT_TITLE="$2"; shift
                         #echo " * Title to use: $OPT_TITLE"
                         ;;
  --use-cache|-c|-t)
                         # Keep short and long files
                         keepSL=1
                         #echo " * Short and Long files will be used"
                         ;;
  --width-between-nodes)
                         OPT_WIDTH_BETWEEN_NODES=$2; shift
                         #echo " * Width between nodes to use: $OPT_WIDTH_BETWEEN_NODES"
                         ;;
  --version|-v)          echo "$PRGNAME version: $PRGVRSN"; exit;;
  --)                    shift; break;;
   *)                    echo "unknow argument \"$1\""; exit $ERR_ARGUMENT;;
  esac
  shift
done

inputfile=$1

##################################
# Check input file
##################################
if [ ! -f "$inputfile" ]; then 
  echo "$PRGNAME: error: Input file ($inputfile) does not exists!"
  exit 1;
fi

##################################
# Configuration file overwritting by command line options
##################################
if [[ ! -z "$OPT_FILTER" ]]; then
  if [[ "$OPT_FILTER" == "" ]]; then
    FARG=""
    FVAL=""
  else
    FARS="-R"
    FVAL="$OPT_FILTER"
  fi
fi

if [[ -z "$OPT_WIDTH_BETWEEN_NODES" ]]; then
  WIDTH_BETWEEN_NODES=200
else
  if [[ $OPT_WIDTH_BETWEEN_NODES -gt 250 ]]; then
    echo "$PRGNAME: error: width between nodes too big" >&2
    exit 1
  fi

  if [[ $OPT_WIDTH_BETWEEN_NODES -lt 100 ]]; then
    echo "$PRGNAME: error: width between nodes too small" >&2
    exit 1
  fi

  WIDTH_BETWEEN_NODES=$OPT_WIDTH_BETWEEN_NODES
fi

if [[ -z "$OPT_SHOW_TIME" ]]; then
  SHOW_TIME=yes
else
  SHOW_TIME=$OPT_SHOW_TIME
fi

if [[ -n "$OPT_TITLE" ]]; then
  TITLE="$OPT_TITLE"
else
  TITLE="$inputfile"
fi

# DESTDIR
DESTDIR=`ls $inputfile | sed -r "s/(.+)\.(.+)/\1/"`;
mkdir -p $DESTDIR

# Use cache?
if [[ -f $DESTDIR/metadb ]]; then
  if [[ -f $DESTDIR/callflow.short ]]; then
    FILE=$(basename $inputfile)
    MD5_FILE=$(md5sum $inputfile | awk '{print $1}')

    MD5_CACHE=$(awk -F"|" -v FILE=$FILE '{if ($1 == FILE) {print $2} }' $DESTDIR/metadb)

    if [[ $MD5_FILE == $MD5_CACHE ]]; then
      USE_CACHE=yes
    else
      USE_CACHE=no
    fi
  else
    # The file $DESTDIR/callflow.short does not exist
    USE_CACHE=no
  fi
else
  # The file $DESTDIR/metadb does not exist
  USE_CACHE=no
fi

##################################
# order file
##################################
# Build the order file and exit
if [[ $ORDER = 1 ]]; then

  [[ $USE_CACHE == "no" ]] && make_long_and_short_caches

  awk -F"|" '{
    if ($0 !~ "#" ) { printf ("%s:%s\n%s:%s\n", $4, $5, $7, $8) }
  }' $DESTDIR/callflow.short | sort --unique

  exit 0
fi

##################################
# Build short and long files
##################################
# Copy the input file into destdir
TRACEFILE=$(basename $inputfile)
cp $inputfile $DESTDIR/$TRACEFILE

# if we do want to build new short and long file
if [ $keepSL = 0 ]; then

  make_long_and_short_caches

else
  # We want to keep SL files
  # disable duplicate frame remove
  if [ $removeDF = 1 ]; then
    echo "$PRGNAME: warning: duplicate frames will not be removed!"
  fi
  removeDF=0
fi

# We have to check if short and long file exist
if [ ! -f $DESTDIR/callflow.long ]; then
  echo "$PRGNAME: error: File callflow.long does not exist!"
  exit 1;
else
  # Some SIP messages don't include a space between the Call-ID tag and
  # Call-ID value
  sed -i 's,\(Call-ID:\)\([^ ]\),\1 \2,' $DESTDIR/callflow.long
fi

if [ ! -f $DESTDIR/callflow.short ]; then
  echo "$PRGNAME: error: File callflow.short does not exist!"
  exit 1;
else
  # Remove Malformed packages from callflow.short, especially because it
  # contains unpaired "["
  sed -i '/Malform/d' $DESTDIR/callflow.short
fi

# Create Frames
mkdir -p $DESTDIR/frames
awk -f $SETUPDIR/scripts/long2html.awk -v destDir=$DESTDIR < $DESTDIR/callflow.long

# Remove duplicate Frame
if [ $removeDF = 1 ]; then
  #echo "Removing duplicate frames"
  $SETUPDIR/scripts/removedups.sh $DESTDIR $DESTDIR/frames $TMPDIR
  rm $DESTDIR/callflow.short
  mv $DESTDIR/callflow.short.new $DESTDIR/callflow.short
fi

# Add session ID and colorization
if [[ $WITH_SESSION == "yes" ]]; then
  awk -f $SETUPDIR/scripts/marksession.awk -v session_token="$SESSION" -v destDir=$DESTDIR < $DESTDIR/callflow.short > $DESTDIR/callflow.short.new
  rm $DESTDIR/callflow.short
  mv $DESTDIR/callflow.short.new $DESTDIR/callflow.short
fi

##################################
# common
##################################
# Compute nodes
awk -F"|" '{ if ($0 !~ "^#") { printf("%s:%s\n%s:%s\n", $4, $5, $7, $8) }}' $DESTDIR/callflow.short | 
  sort -u > $TMPDIR/callflow.auto-uniq.$PPID

# orderFile
if [ $orderFile != none ]; then
    # add forced nodes
    cp $TMPDIR/callflow.auto-uniq.$PPID $TMPDIR/callflow.auto-uniq-forced.$PPID
    grep "!f!" $orderFile | cut -d " " -f 1 >> $TMPDIR/callflow.auto-uniq-forced.$PPID
    cut -d " " -f 1 < $orderFile > $TMPDIR/callflow.order-nodes.$PPID

    # prune nodes not appearing in capture file and not forced.
    grep -w -v -f $TMPDIR/callflow.auto-uniq-forced.$PPID $TMPDIR/callflow.order-nodes.$PPID > $TMPDIR/callflow.prune-candidate.$PPID
    awk -f $SETUPDIR/scripts/makevars.awk < $TMPDIR/callflow.prune-candidate.$PPID > $TMPDIR/callflow.prune-vars.$PPID
    cat $TMPDIR/callflow.prune-vars.$PPID $SETUPDIR/scripts/prunenodes.awk > $TMPDIR/callflow.prune-awk.$PPID
    awk -F"|" -f $TMPDIR/callflow.prune-awk.$PPID < $DESTDIR/callflow.short > $TMPDIR/callflow.auto-not-pruned.$PPID
    grep -w -v -f $TMPDIR/callflow.auto-not-pruned.$PPID $TMPDIR/callflow.prune-candidate.$PPID > $TMPDIR/callflow.auto-prune.$PPID
    grep -w -v -f $TMPDIR/callflow.auto-prune.$PPID $TMPDIR/callflow.order-nodes.$PPID > $TMPDIR/callflow.order-nodes-pruned.$PPID

    # add nodes appearing in capture file but not in order file
    cp $TMPDIR/callflow.order-nodes-pruned.$PPID $TMPDIR/callflow.order-nodes-final.$PPID
    grep -w -f $TMPDIR/callflow.auto-uniq-forced.$PPID $TMPDIR/callflow.order-nodes.$PPID >> $TMPDIR/callflow.order-nodes-final.$PPID
    grep -w -f $TMPDIR/callflow.order-nodes-final.$PPID $orderFile > $TMPDIR/callflow.order.$PPID
    grep -w -v -E -f $TMPDIR/callflow.order-nodes.$PPID $TMPDIR/callflow.auto-uniq-forced.$PPID >> $TMPDIR/callflow.order.$PPID
    sed "s/!f!//g" < $TMPDIR/callflow.order.$PPID > $TMPDIR/callflow.order-final.$PPID

    finalOrderFile=$TMPDIR/callflow.order-final.$PPID

    #echo Using the following order:
    #cat $finalOrderFile
else
    echo "$PRGNAME: warning: order file not found -- using alphabetical"
    finalOrderFile=$TMPDIR/callflow.auto-uniq.$PPID
fi

( awk -f $SETUPDIR/scripts/makevars.awk $finalOrderFile

  cat << AWK_BEGIN_SECTION

  title = "$TITLE"

  # Add graph variables
  yLineSpace = 24
  xHostSpace = $WIDTH_BETWEEN_NODES
  rightMargin = 100
  topMargin = 50
  bottomMargin = 50
  showTime = "$SHOW_TIME"
  if ( showTime == "yes" ) {
    leftMargin = 120
  } else {
    leftMargin = 50
  }
  numTraces = numHosts

  # Add localLoop to vars in order to delete self messaging
  localLoop = "$localLoop"

AWK_BEGIN_SECTION

  echo "numLines = $(cat $DESTDIR/callflow.short | wc -l)"
  echo

  # Add colors from colorFile
  awk 'BEGIN { I = 0} {
    for (N = 1; N <= NF; N++) {
      printf("  color[%d] = \"%s\"\n", I++, $N)
    }
  } END {
    print "  colors = length(color) - 1"
  }' <<< "$COLORS"

  echo
  cat $SETUPDIR/scripts/callflow.awk

) > $TMPDIR/callflow.awk.$PPID

# Build callflow.svg
awk -F "|" -f $TMPDIR/callflow.awk.$PPID $DESTDIR/callflow.short > $DESTDIR/callflow.svg

# Remove temporary files
\rm $TMPDIR/callflow.*.$PPID

# Build callflow.png if inkscape is available
if [ ! -z $(which inkscape) ]; then
	inkscape --export-dpi=90 -C --export-background=white --export-png=$DESTDIR/callflow.png $DESTDIR/callflow.svg

	# Build HTML files
	( echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\""
	  echo "  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"
	  echo "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">"
	  echo " <head>"
	  echo "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>"
	  echo "  <title>Callflow: $inputfile</title>"
	  echo "  <style type=\"text/css\">"
	  echo ".callflow-image img {"
	  echo " display: block;"
	  echo " border: 0px;"
	  echo " margin-left: auto;"
	  echo " margin-right: auto;"
	  echo "}"
	  echo "  </style>"
	  echo " </head>"
	  echo " <body>"
	  echo "  <div class=\"callflow-image\">"
	  cat imagemap
	  echo "   <p>"
	  echo "    <img src=\"callflow.png\" usemap=\"#callflowmap\" alt=\"Call flow sequence diagram for $inputfile\"/>"
	  echo "   </p>"
	  echo "   <p>"
	  echo "    <a href=\"$TRACEFILE\">Trace source</a>"
	  echo "   </p>"
	  echo "  </div>"
	  echo " </body>"
	  echo "</html>"
	) > $DESTDIR/index.html
	 
	( echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\""
	  echo "  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"
	  echo "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">"
	  echo " <head>"
	  echo "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>"
	  echo "  <title>Callflow: $inputfile</title>"
	  echo "  <style type=\"text/css\">"
	  echo ".callflow-image img {"
	  echo " display: block;"
	  echo " border: 0px;"
	  echo " margin-left: auto;"
	  echo " margin-right: auto;"
	  echo "}"
	  echo "  </style>"
	  echo "  <script type=\"text/javascript\" src=\"js/overlib.js\"></script>"
	  echo "  <script type=\"text/javascript\" src=\"js/callflow.js\"></script>"
	  echo " </head>"
	  echo " <body>"
	  echo "  <div class=\"callflow-image\">"
	  cat imagemap
	  echo "   <p>"
	  echo "    <img src=\"callflow.png\" usemap=\"#callflowmap\" alt=\"Call flow sequence diagram for $inputfile\"/>"
	  echo "   </p>"
	  echo "   <p>"
	  echo "    <a href=\"$TRACEFILE\">Trace source</a>"
	  echo "   </p>"
	  echo "  </div>"
	  echo " </body>"
	  echo "</html>"
	) > $DESTDIR/index_dynamic.html
	 
	#Copy JavaScript files into DESTDIR
	cp -af $SETUPDIR/js $DESTDIR/


	sed 's/coords=/target=\"msg\" coords=/' $DESTDIR/index.html > $DESTDIR/graph.html

	firstFrame=$(awk -F "|" '{ if (NR == 1) print $3 }' $DESTDIR/callflow.short)

	( echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\""
	  echo "   \"http://www.w3.org/TR/html4/frameset.dtd\">"
	  echo "<html>"
	  echo " <head>"
	  echo "  <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" >"
	  echo "  <title>Callflow: $title</title>"
	  echo " </head>"
	  echo " <frameset cols=\"75%,25%\">"
	  echo "  <frame name=\"graph\" src=\"graph.html\">"
	  echo "  <frame name=\"msg\" src=\"frames/Frame${firstFrame}.html\">"
	  echo " </frameset>"
	  echo "</html>"
	) > $DESTDIR/index_with_frames.html
fi

\rm imagemap
exit 0;

