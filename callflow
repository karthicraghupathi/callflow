#!/bin/bash
###
###  CallFlow diagram generator
###
###  Usage:  callflow.sh capture-file | -t text-input file
###
###  Output: $DESTDIR/callflow.svg, $DESTDIR/callflow.png, $DESTDIR/index.html, $DESTDIR/frames/frame*.html
###
###  Files:  order, filter, session, $CONFDIR/order, $CONFDIR/filter, $CONFDIR/session
###

##################################
# Variables
##################################
CONFDIR="/etc/callflow";
keepSL=0 # do not keep cap.short and cap.long files
removeDF=0; # do not remove duplicate frames
sessionID=0; # do not use session ID
order=0; # do not build order file
noLocalLoop=0; # do not take into account flows from and to the same element (rounded flows)
readonly VersionSVN="$Id$"; #DO NOT EDIT THIS LINE BY HAND, DATE IS AUTOMATICALLY ADDED BY SUBVERSION
readonly PRGVRSN=$(awk '{split($4, A, "-"); print A[1] A[2] A[3] "." $3}' <<< "$VersionSVN")
readonly PRGNAME=$(basename $0)

##################################
# Check configuration files :
#   callflow.conf, session, filter, order, colors
##################################
if [ -f callflow.conf ]; then
  . callflow.conf
elif [ -f $CONFDIR/callflow.conf ]; then
  . $CONFDIR/callflow.conf;
else
  # Basic conf
  SETUPDIR="/usr/local/callflow"; 
  TMPDIR="/tmp";
fi

if [ -f session ]; then
    sessionFile=session;
elif [ -f $CONFDIR/session ]; then
    sessionFile=$CONFDIR/session;
else
    sessionFile=none;
fi

if [ -f filter ]; then
    filterFile=filter;
elif [ -f $CONFDIR/filter ]; then
    filterFile=$CONFDIR/filter;
else
    filterFile=none;
fi

if [[ -f order ]]; then
  orderFile=order
else
  orderFile=none
fi

if [[ -f colors ]]; then
  COLORS=$(cat colors)
fi

function usage()
#################
{
  ( echo "$SHORTHELP"
    echo "See $PRGNAME --help for extended help."
  ) >&2
  exit 0
}

function help ()
################
{
  cat << EOF >&1
Usage: $PRGNAME [options] <trace file>

Options:
   -h           Print short help and exit
  --help        Print this help and exit
  --version, -v Print version

  --no-loops
                Prevent flows from and to the same equipment to be represented.

  --no-time
                Do not show the time.

  --order-file, -o
                Create an order file with the nodes in the trace file
                (Don't forget to redirect output in another file.
                 Example of use: callflow -o capture.cap > order)

  --remove-duplicate-frames, -d
                Remove duplicate frames while computing.
                This option should not be selected on the first run.

  --title <title>
                Use <title> as title in the callflow.  If not specified the
                name of file containing the trace will be used instead. Surround
                <title> by quotes in case the title contains spaces or tabs.

  --use-cache, -c, -t
                Use cap.short and cap.long files.
                Note 1: if -c and -d are used, only -c is executed.
                Note 2: this option sould not be selected on the first run.

  --width-between-hosts <width>
                Distance between adjacent hosts in final picture.  The width may
                vary between 100 and 250.  Default = 200.

  --with-session, -s
                Add a session ID to Sequence Lines in FILE/callflow.long
                This option needs a session file in current folder or
                in the SETUP folder (example of session file contents: 'Call-Id:').

EOF
}

readonly SHORTHELP="Usage: $PRGNAME [-dhorstv] <filename>" 

# Command line argument parsing, the allowed arguments are
# alphabetically listed, keep it this way please.
LOPT="help,order-file:,no-loops,no-time,remove-duplicate-frames,title:,width-between-hosts:"
LOPT="$LOPT,use-cache,with-session,version"

# Note that we use `"$@"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=$(getopt --options=cdhorstv --long $LOPT -n $PRGNAME -- "$@")

if [[ $? -ne 0 ]]; then
  echo "Terminating..." >&2
  exit $ERR_ARGUMENT
fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true; do
  case $1 in
  --help)                help; exit ;;
   -h)                   usage; exit;;
  --no-loops)
                         # We want to disable auto flows (From and To the same equipment)
                         noLocalLoop=1;
                         echo " * Flows from and to the same equipment will not be shown"
                         ;;
  --no-time)
                         OPT_SHOW_TIME=no
                         echo " * Time will not be shown"
                         ;;
  --order-file|-o)
                         # Inputfile is a cap-file
                         # make it an order file
                         order=1
                         ;;
  --remove-duplicate-frames|-d)
                         # Remove duplicate frames
                         removeDF=1
                         echo " * Duplicate frames will be removed"
                         ;;
  --title)
                         OPT_TITLE="$2"; shift
                         echo " * Title to use: $OPT_TITLE"
                         ;;
  --use-cache|-c|-t)
                         # Keep short and long files
                         keepSL=1
                         echo " * Short and Long files will be used"
                         ;;
  --with-session|-s)
                         if [ $sessionFile = none ]; then
                           echo "You must create either $CONFDIR/session or ./session to use -s option";
                           exit 1;
                         fi
                         # Add "Session ID"
                         sessionID=1
                         echo " * Session ID will be shown"
                         ;;
  --width-between-hosts)
                         OPT_WIDTH_BETWEEN_HOSTS=$2; shift
                         echo " * Width between hosts to use: $OPT_WIDTH_BETWEEN_HOSTS"
                         ;;
  --version|-v)          echo "$PRGNAME version: $PRGVRSN"; exit;;
  --)                    shift; break;;
   *)                    # echo "unknow argument \"$1\""; exit $ERR_ARGUMENT;;
                         ;;
  esac
  shift
done

echo 

inputfile=$1

##################################
# Check input file
##################################
if [ ! -f "$inputfile" ]; then 
  echo "Input file does not exists!"
  exit 1;
fi

##################################
# order file
##################################
# Build the order file and exit
if [ $order = 1 ]; then
  
  if [[ "$filterFile" == "none" ]]; then
    FARG=""
    FVAL=""

    echo 'Note: no filter file found -- no filters applied'
  else
    FARG="-R"
    FVAL="$(cat $filterFile)"

    echo "Using the following wireshark display filter:"
    echo "$FVAL"
  fi

  tshark -r $inputfile $FARG "$FVAL" \
    -o 'column.format: "Src", "%s", "Port", "%S", "Dest", "%d", "Port", "%D"' |
    awk '{ printf("%s:%s\n%s:%s\n", $1, $2, $3, $4); }' | sort --unique
  exit 0;
fi

if [[ -z "$OPT_WIDTH_BETWEEN_HOSTS" ]]; then
  WIDTH_BETWEEN_HOSTS=200
else
  if [[ $OPT_WIDTH_BETWEEN_HOSTS -gt 250 ]]; then
    echo "$PRGNAME: error: width between hosts too big" >&2
    exit 1
  fi

  if [[ $OPT_WIDTH_BETWEEN_HOSTS -lt 100 ]]; then
    echo "$PRGNAME: error: width between hosts too small" >&2
    exit 1
  fi

  WIDTH_BETWEEN_HOSTS=$OPT_WIDTH_BETWEEN_HOSTS
fi

if [[ -z "$OPT_SHOW_TIME" ]]; then
  SHOW_TIME=yes
else
  SHOW_TIME=$OPT_SHOW_TIME
fi

if [[ -n "$OPT_TITLE" ]]; then
  TITLE="$OPT_TITLE"
else
  TITLE="$inputfile"
fi

##################################
# Build short and long files
##################################
# DESTDIR
DESTDIR=`ls $inputfile | sed -r "s/(.+)\.(.+)/\1/"`;
mkdir -p $DESTDIR
# Copy cap file into destdir
TRACEFILE=$(basename $inputfile)
cp $inputfile $DESTDIR/$TRACEFILE

# if we do want to build new short and long file
if [ $keepSL = 0 ]; then

  # filterFile
  if [[ "$filterFile" == "none" ]]; then
    FARG=""
    FVAL=""

    echo 'Note: no filter file found -- no filters applied'
  else
    FARG="-R"
    FVAL="$(cat $filterFile)"

    echo "Using the following wireshark display filter:"
    echo "$FVAL"
  fi

  tshark -r $inputfile $FARG "$FVAL" -V > $DESTDIR/callflow.long

  tshark -r $inputfile $FARG "$FVAL" -t a \
    -o 'column.format: "No.", "%m", "Time", "%t", "Src", "%s", "Port", "%S", "Ignored", "%m", "Dest", "%d", "Port", "%D", "Protocol", "%p", "Info", "%i"' |
    sed 's/^[[:blank:]]*//;s/\([0-9]\{3\}\)000 /\1 /' | awk '{
      # The match and the substr are working together to get the string starting
      # at field 9 till the end of the line.  This provides the frame summary line.
      # But the frame summary may contain characters that influence the match,
      # such as the "(" and ")" characters.  Therefor look for the end of the
      # protocol field (8) as the protocol field contains most likely regular
      # ascii characters.

      # The A[0, "start"] gives the start position of the $8
      match($0, $8, A)
      SUMMARY_START = A[0, "start"] + length($8) + 1
      SUMMARY = substr($0, SUMMARY_START)
      printf("%s|%s|%s|%s||%s|%s|%s|%s\n", $1, $2, $3, $4, $6, $7, $8, SUMMARY)

  }' > $TMPDIR/${PRGNAME}-tshark-1.$PPID

  tshark -r $inputfile $FARG "$FVAL" -t a \
    -o 'column.format: "No.", "%m", "Cseq", "%Cus:sip.CSeq"' |
    sed 's/^[[:blank:]]*//;s/ /|/' > $TMPDIR/${PRGNAME}-tshark-2.$PPID

  ( # echo "time|no|trace|src|srcport|dir|dst|dstport|prot|summary|remark"
    join -t "|" --nocheck-order $TMPDIR/${PRGNAME}-tshark-1.$PPID $TMPDIR/${PRGNAME}-tshark-2.$PPID | awk -F "|" '{
      printf("%s||%s|", $2, $1)
      for ( N = 3; N < NF; N++) {
        printf("%s|", $N)
      }
      printf("%s\n", $N)
    }'
  ) > $DESTDIR/callflow.short

  rm $TMPDIR/${PRGNAME}-tshark-1.$PPID $TMPDIR/${PRGNAME}-tshark-2.$PPID

else
  # We want to keep SL files
  # disable duplicate frame remove
  removeDF=0
fi

# We have to check if short and long file exist
if [ ! -f $DESTDIR/callflow.long ]; then
  echo "File callflow.long does not exist!"
  exit 1;
else
  # Some SIP messages don't include a space between the Call-ID tag and
  # Call-ID value
  sed -i 's,\(Call-ID:\)\([^ ]\),\1 \2,' $DESTDIR/callflow.long
fi

if [ ! -f $DESTDIR/callflow.short ]; then
  echo "File callflow.short does not exist!"
  exit 1;
else
  # Remove Malformed packages from callflow.short, especially because it
  # contains unpaired "["
  sed -i '/Malform/d' $DESTDIR/callflow.short
fi

# Create Frames
mkdir -p $DESTDIR/frames
awk -f $SETUPDIR/scripts/long2html.awk -v destDir=$DESTDIR < $DESTDIR/callflow.long

# Remove duplicate Frame
if [ $removeDF = 1 ]; then
  echo "Removing duplicate frames"
  $SETUPDIR/scripts/removedups.sh $DESTDIR $DESTDIR/frames $TMPDIR
  rm $DESTDIR/callflow.short
  mv $DESTDIR/callflow.short.new $DESTDIR/callflow.short
fi

# Add session ID
if [ $sessionID = 1 ]; then
  awk -f $SETUPDIR/scripts/marksession.awk -v session_token="`cat $sessionFile`" -v destDir=$DESTDIR < $DESTDIR/callflow.short > $DESTDIR/callflow.short.new
  rm $DESTDIR/callflow.short
  mv $DESTDIR/callflow.short.new $DESTDIR/callflow.short
fi

##################################
# common
##################################
# Compute nodes
awk -F"|" '{ if ($0 !~ "^#") { printf("%s:%s\n%s:%s\n", $4, $5, $7, $8) }}' $DESTDIR/callflow.short | 
  sort -u > $TMPDIR/callflow.auto-uniq.$PPID

# orderFile
if [ $orderFile != none ]; then
    # add forced nodes
    cp $TMPDIR/callflow.auto-uniq.$PPID $TMPDIR/callflow.auto-uniq-forced.$PPID
    grep "!f!" $orderFile | cut -d " " -f 1 >> $TMPDIR/callflow.auto-uniq-forced.$PPID
    cut -d " " -f 1 < $orderFile > $TMPDIR/callflow.order-nodes.$PPID

    # prune nodes not appearing in capture file and not forced.
    grep -w -v -f $TMPDIR/callflow.auto-uniq-forced.$PPID $TMPDIR/callflow.order-nodes.$PPID > $TMPDIR/callflow.prune-candidate.$PPID
    awk -f $SETUPDIR/scripts/makevars.awk < $TMPDIR/callflow.prune-candidate.$PPID > $TMPDIR/callflow.prune-vars.$PPID
    cat $TMPDIR/callflow.prune-vars.$PPID $SETUPDIR/scripts/prunenodes.awk > $TMPDIR/callflow.prune-awk.$PPID
    awk -F"|" -f $TMPDIR/callflow.prune-awk.$PPID < $DESTDIR/callflow.short > $TMPDIR/callflow.auto-not-pruned.$PPID
    grep -w -v -f $TMPDIR/callflow.auto-not-pruned.$PPID $TMPDIR/callflow.prune-candidate.$PPID > $TMPDIR/callflow.auto-prune.$PPID
    grep -w -v -f $TMPDIR/callflow.auto-prune.$PPID $TMPDIR/callflow.order-nodes.$PPID > $TMPDIR/callflow.order-nodes-pruned.$PPID

    # add nodes appearing in capture file but not in order file
    cp $TMPDIR/callflow.order-nodes-pruned.$PPID $TMPDIR/callflow.order-nodes-final.$PPID
    grep -w -f $TMPDIR/callflow.auto-uniq-forced.$PPID $TMPDIR/callflow.order-nodes.$PPID >> $TMPDIR/callflow.order-nodes-final.$PPID
    grep -w -f $TMPDIR/callflow.order-nodes-final.$PPID $orderFile > $TMPDIR/callflow.order.$PPID
    grep -w -v -E -f $TMPDIR/callflow.order-nodes.$PPID $TMPDIR/callflow.auto-uniq-forced.$PPID >> $TMPDIR/callflow.order.$PPID
    sed "s/!f!//g" < $TMPDIR/callflow.order.$PPID > $TMPDIR/callflow.order-final.$PPID

    finalOrderFile=$TMPDIR/callflow.order-final.$PPID

    echo Using the following order:
    cat $finalOrderFile
else
    echo 'Warning: order file not found -- using alphabetical'
    finalOrderFile=$TMPDIR/callflow.auto-uniq.$PPID
fi

( awk -f $SETUPDIR/scripts/makevars.awk $finalOrderFile

  cat << AWK_BEGIN_SECTION

  title = "$TITLE"

  # Add graph variables
  yLineSpace = 24
  xHostSpace = $WIDTH_BETWEEN_HOSTS
  rightMargin = 100
  topMargin = 50
  bottomMargin = 50
  showTime = "$SHOW_TIME"
  if ( showTime == "yes" ) {
    leftMargin = 120
  } else {
    leftMargin = 50
  }
  numTraces = numHosts

  # Add noLocalLoop to vars in order to delete self messaging
  noLocalLoop = "$noLocalLoop"

AWK_BEGIN_SECTION

  echo "numLines = $(cat $DESTDIR/callflow.short | wc -l)"
  echo

  # Add colors from colorFile
  awk 'BEGIN { I = 0} {
    for (N = 1; N <= NF; N++) {
      printf("  color[%d] = \"%s\"\n", I++, $N)
    }
  } END {
    print "  colors = length(color) - 1"
  }' <<< "$COLORS"

  echo
  cat $SETUPDIR/scripts/callflow.awk

) > $TMPDIR/callflow.awk.$PPID

# Build callflow.svg
awk -F "|" -f $TMPDIR/callflow.awk.$PPID $DESTDIR/callflow.short > $DESTDIR/callflow.svg

# Remove temporary files
\rm $TMPDIR/callflow.*.$PPID

# Build callflow.png
inkscape --export-dpi=90 -C --export-background=white --export-png=$DESTDIR/callflow.png $DESTDIR/callflow.svg

# Build HTML files
( echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\""
  echo "  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"
  echo "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">"
  echo " <head>"
  echo "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>"
  echo "  <title>Callflow: $inputfile</title>"
  echo "  <style type=\"text/css\">"
  echo ".callflow-image img {"
  echo " display: block;"
  echo " border: 0px;"
  echo " margin-left: auto;"
  echo " margin-right: auto;"
  echo "}"
  echo "  </style>"
  echo " </head>"
  echo " <body>"
  echo "  <div class=\"callflow-image\">"
  cat imagemap
  echo "   <p>"
  echo "    <img src=\"callflow.png\" usemap=\"#callflowmap\" alt=\"Call flow sequence diagram for $inputfile\"/>"
  echo "   </p>"
  echo "   <p>"
  echo "    <a href=\"$TRACEFILE\">Trace source</a>"
  echo "   </p>"
  echo "  </div>"
  echo " </body>"
  echo "</html>"
) > $DESTDIR/index.html
 
( echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\""
  echo "  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">"
  echo "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">"
  echo " <head>"
  echo "  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>"
  echo "  <title>Callflow: $inputfile</title>"
  echo "  <style type=\"text/css\">"
  echo ".callflow-image img {"
  echo " display: block;"
  echo " border: 0px;"
  echo " margin-left: auto;"
  echo " margin-right: auto;"
  echo "}"
  echo "  </style>"
  echo "  <script type=\"text/javascript\" src=\"js/overlib.js\"></script>"
  echo "  <script type=\"text/javascript\" src=\"js/callflow.js\"></script>"
  echo " </head>"
  echo " <body>"
  echo "  <div class=\"callflow-image\">"
  cat imagemap
  echo "   <p>"
  echo "    <img src=\"callflow.png\" usemap=\"#callflowmap\" alt=\"Call flow sequence diagram for $inputfile\"/>"
  echo "   </p>"
  echo "   <p>"
  echo "    <a href=\"$TRACEFILE\">Trace source</a>"
  echo "   </p>"
  echo "  </div>"
  echo " </body>"
  echo "</html>"
) > $DESTDIR/index_dynamic.html
 
#Copy JavaScript files into DESTDIR
cp -af $SETUPDIR/js $DESTDIR/


sed 's/coords=/target=\"msg\" coords=/' $DESTDIR/index.html > $DESTDIR/graph.html

firstFrame=$(awk -F "|" '{ if (NR == 1) print $3 }' $DESTDIR/callflow.short)

( echo "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\""
  echo "   \"http://www.w3.org/TR/html4/frameset.dtd\">"
  echo "<html>"
  echo " <head>"
  echo "  <meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" >"
  echo "  <title>Callflow: $title</title>"
  echo " </head>"
  echo " <frameset cols=\"75%,25%\">"
  echo "  <frame name=\"graph\" src=\"graph.html\">"
  echo "  <frame name=\"msg\" src=\"frames/Frame${firstFrame}.html\">"
  echo " </frameset>"
  echo "</html>"
) > $DESTDIR/index_with_frames.html

\rm imagemap
exit 0;

