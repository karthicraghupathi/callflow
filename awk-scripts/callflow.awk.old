/* ---------------------------------------------- */
/* please do not put anything before this comment */
/* the header of this file is automatically generated by callflow.sh and makevars.awk*/

  yLineSpace = 24;
  numTraces = numHosts;

  print "<?xml version='1.0'?>";
  print "<!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.0//EN'";
  print "'http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd'>";

  for(i=0;i<numHosts;i++)
  {
    lookup[hosts[i]] = i+1;
    printf "<!-- lookup['%s'] = %d -->\n", hosts[i], i+1;
  }

  w = (numHosts+1) * 100 + 200;
  h = numLines * yLineSpace + 100;

  printf "<svg width='%d' height='%d' viewBox='0 0 %d %d'>\n",w, h, w, h;
    
  insertStyleDefs();

  ystart = 60;
  yend = h;

  printf "<text x='%d' y='%d' class='label title-text'>%s</text>\n",
    (w/2)-100,
    ystart-35,
    title;
  for(i=0;i<numTraces;i++)
    {
      /* do the labels here */
         if (label[i] == "")
           label[i] = hosts[i];

      printf "<text x='%d' y='%d' class='label host-text'>%s</text>\n",
      100+(i*100),
      ystart-(15*(i%2)+2),
      label[i];

      printf "<line x1='%d' y1='%d' x2='%d' y2='%d' class='element-line' />\n", 100+(i*100), ystart, 100+(i*100), yend;
    }

  printf "<map name='callflowmap'>\n" > "imagemap";
}
func insertStyleDefs () {
  printf "<defs>\n<style type=\"text/css\"><![CDATA[\n";
/*  printf " * { fill:none ; stroke : black ; }\n";*/
  printf " .traceline { stroke-width: 1pt; stroke:black; }\n";
  printf " .pkt-text { color: red; font-family: Trebuchet MS,Helvetica, sans-serif;\n";
  printf "            font-size: 8pt; stroke: none; fill: black;}\n";
  printf " .comment-text { color: black; font-family: Trebuchet MS,Helvetica, sans-serif;\n";
  printf "            font-size: 9pt; font-style: italic; stroke: none; fill: green;}\n";
  printf " .host-text { color: black; font-family: Trebuchet MS,Helvetica,sans-serif;\n";
  printf "             font-size: 10pt; stroke:none; fill:blue;}\n";
  printf " .title-text { color: black; font-family: Trebuchet MS,Helvetica,sans-serif;\n";
  printf "              font-size:16pt; stroke:none; fill:black;}\n";
  printf " .label { color: blue; text-anchor: middle ; }\n";
  printf " .arrowhead { stroke-width: 0.5pt;stroke:black; }\n";
  printf " .element-line { stroke-width: 0.25pt; stroke: black; }\n";
  printf " .link { color: blue; font-family: Trebuchet MS,Helvetica, sans-serif;\n";
  printf "		font-size: 9pt; text-decoration: underline; fill: blue;}\n";
  printf " .session-text { color: red; font-family: Trebuchet MS,Helvetica, sans-serif;\n";
  printf "		font-size: 9pt; font-weight: bold; fill: red;}\n";
  printf " ]]></style>\n</defs>\n";
}

func arrow(x,y,d)
{
  
  printf "<polygon points='%d,%d %d,%d %d,%d %d,%d' class='arrowhead'/>\n", x,y, x+5*d,y-3,x+3*d,y,x+5*d,y+3;
}

func line(x1,x2,y,output)
{
  if (x1 == x2)
  {
    printf "<polyline points='%d,%d %d,%d %d,%d %d,%d %d,%d %d,%d %d,%d %d,%d' fill='none' class='traceline'/>\n",
      x1,y-18+7,
      x1+5,y-18+7,
      x1+12,y-15+7,
      x1+15,y-10+7,
      x1+15,y-5+7,
      x1+12,y-2+7,
      x1+5,y+7,
      x1,y+7;
    arrow(x1,y+7,1);

    xtext = x1 + 18;
    
    /* write out imagemap area */
    printf "<area href='frames/Frame%d.html' coords='%d,%d,%d,%d'></area>\n", $1, x1, y-yLineSpace+2, x1+15, y+7+1 >> "imagemap"
  }
  else if (x1<x2)
  {
    printf "<line x1='%d' y1='%d' x2='%d' y2='%d' class='traceline' />\n", x1, y, x2, y;
    arrow(x2,y,-1);
  
    xtext = x1 + 10;
    
    /* write out imagemap area */
    printf "<area href='frames/Frame%d.html' coords='%d,%d,%d,%d'></area>\n", $1, x1, y-yLineSpace+2, x2, y+1 >> "imagemap"
  }
  else
  {
    printf "<line x1='%d' y1='%d' x2='%d' y2='%d' class='traceline' />\n", x1, y, x2, y;
    arrow(x2,y,1);
    
    xtext = x2 + 10;
    
    /* write out imagemap area */
    printf "<area href='frames/Frame%d.html' coords='%d,%d,%d,%d'></area>\n", $1, x2, y-yLineSpace+2, x1, y+1 >> "imagemap"
  }
  
  printf "<a xlink:href='frames/Frame%d.html' xlink:target='_blank'>\n", $1;
  printf "<text x='%d' y='%d' class='pkt-text'>%s</text>\n", xtext, y-4, output;
  printf "</a>\n";
}

{ 
/*  y = strtonum($1);*/
  y = NR;
  y = y * yLineSpace + ystart;

  if($1 == "#")
  {
	 output = "";
	 for (i=2; i<=NF; i++)
	 {
		if ($i == "!")
		   break;
		output = output " " $i;
	 }

	 link = "";
	 if($i == "!")
	 {
		i++;
		for(;i<=NF;i++)
		{
		   link = link " " $i;
		}
	 }

	 if (link != "")
	 {
		printf("<text x='%d' y='%d' class='link'>%s</text>\n", 50, y, output);
		printf("<area href='%s' coords='%d,%d,%d,%d'></area>\n", link, 50, y-yLineSpace+2, w, y+1) >> "imagemap";
	 }
	 else
	 {
		/* This is a comment line */
		printf("<text x='%d' y='%d' class='comment-text'>%s</text>\n", 50, y, output);
	 }
  }
  else
  {
	 if ($4 ~ "{([0-9]+)}") {
		printf("<text x='%d' y='%d' class='session-text'>%s</text>\n", 25, y, $4);
	 }
	 l1 = sprintf("%s:%s", $2,$3);
	 l2 = sprintf("%s:%s", $5,$6);
	 for (i=0; i<numHosts; i++)
	 {
	   if(l1 ~ hosts[i])
	   {
		 x1 = strtonum(lookup[hosts[i]]);
	   }
	   if(l2 ~ hosts[i])
	   {
		 x2 = strtonum(lookup[hosts[i]]);
	   }
	 }

	 x1 = x1 * 100;
	 x2 = x2 * 100;

	 ORS = "";
	 printf "<text x='%d' y='%d' class='pkt-text'>%d</text>\n", 50, y, $1;

	 output = "";
	 for(i=7;i<=NF;i++) output = output " " $i;

	 gsub("SIP(/SDP|) *(Status|Request): *","", output);
	 gsub(", with session description *$"," w/SDP",output);

	 line(x1,x2,y,output);
  }
}


END {
  printf "</map>\n" >> "imagemap";
  printf "</svg>\n";
    }
